
#Hoofdstuk 21 Opgave 1
"""
Opdracht is:
schrijf een functie my_int_calc(f,f0,a,b,N,option) 
f --> functie object 
a en b zijn constanten, a < b
N een positief geheel getal 
Option -> 'rect', 'simp' of 'trap'
x = (a,b) in N gelijke segmenten
f0 is een beginwaarde 
Output -> I --> benadering van de integraal van f(x) -> berekend door de input argument option.

DUS option moet uit de trapezium regel, de Simpson regel , en rect regel bestaan. Ik denk dat we dan deze 3 methode eerst appart moeten definieren
en de USER laten een keuze maken tussen deze drie methoden.
Ik weet even nog niet wat de rect regel is.
We moeten de user een functie laten definieren?

We zullen van de trapezuim methode en de simpson methode functions maken en die aan het ein samenvoegen in de function my_int_calc


Ik begrijp even niet wat f0 is?


"""

"""
Enkelvoudige trapezium regel:
I = (b-a)/2 * ((f(a)+f(b))

Samengestelde Trapezium regel:
h = (b-a)/2
I = h/2 * (f(x0) + f(xn)+ 2 * SOMMATIE[i=1 --> n-1](f(xi)))
""" 
import numpy as np
# Samengestelde Trapezium methode 

# Defenieer een functie om te integreren 
#f = input("Write out a function:", )
f = lambda x: x**2
#Definieer een functie voor de samengestelde trapezium methode

def samtrap(f,x0,xn,n):
    # Bereken de stap grootte 
    h = (xn - x0) / n
    
    # Vindt de som 
    integration_1 = f(x0) + f(xn)
    
    # Volgens de Samengestelde Trap regel --> I = h/2[f(x0) + f(xn) + 2 * SOM{i=1 -> i=n-1}f(xi)]
    #De recursie om SOM{i=1 -> i=n-1}f(xi)
    for i in range(1,n):
        k = x0 + i*h # i*h is de stapgrootte vanaf i=1 tot i=n-1. Bijvoorbeeld als i=1 gaat  x0 -> x1 en dus is k = x1 en zo ook is k=x2 etc door de recursie
        integration_2 = integration_1 + 2 * f(k)
    
    # Finding final integration value
    integration_3 = integration_2 * h/2
    
    return integration_3
    

# Simpson's 1/3 Rule

# Implementing Simpson's 1/3 
def simpson13(x0,xn,n):
    # calculating step size
    h = (xn - x0) / n
    
    # Finding sum 
    integration_4 = f(x0) + f(xn)
    
    
    for i in range(1,n): 
        k = x0 + i*h #k zelfde als bij Trapezium methode
        
        #Als i deelbaar is door 2, dan wordt integration_5 gebruikt
        # Als is niet deelbaar is door 2, dan wordt integration_6 gebruikt
        if i%2 == 0:
            integration_5 = integration_4 + 2 * f(k) 
        else:
            integration_6 = integration_5 + 4 * f(k) 
    
    # Finding final integration value
    integration_7 = integration_6 * h/3
    
    return integration
    
# Input section
lower_limit = float(input("Enter lower limit of integration: "))
upper_limit = float(input("Enter upper limit of integration: "))
sub_interval = int(input("Enter number of sub intervals: "))

# Call trapezoidal() method and get result
result = simpson13(lower_limit, upper_limit, sub_interval)
print("Integration result by Simpson's 1/3 method is: %0.6f" % (result) )


def my_int_calc(f,f0,a,b,N,option):
    option = print(str(' Kies trap of simp'))
    if option is 'trap':
        return samtrap
    elif option is 'simp':
        return simpson13
    elif option is 'rect':
        print("Gebruik a.u.b 'trap' of 'simp'")
    else: 
        print("Incorrecte functie.Gebruik a.u.b 'trap' of 'simp'")










